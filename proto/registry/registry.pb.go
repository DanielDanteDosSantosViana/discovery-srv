// Code generated by protoc-gen-go.
// source: github.com/micro/discovery-srv/proto/registry/registry.proto
// DO NOT EDIT!

/*
Package go_micro_srv_discovery_registry is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/discovery-srv/proto/registry/registry.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	DeregisterRequest
	DeregisterResponse
	GetServiceRequest
	GetServiceResponse
	ListServicesRequest
	ListServicesResponse
	WatchRequest
	WatchResponse
*/
package go_micro_srv_discovery_registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import discovery "github.com/micro/go-platform/discovery/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RegisterRequest struct {
	Service *discovery.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetService() *discovery.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeregisterRequest struct {
	Service *discovery.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *DeregisterRequest) Reset()                    { *m = DeregisterRequest{} }
func (m *DeregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*DeregisterRequest) ProtoMessage()               {}
func (*DeregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeregisterRequest) GetService() *discovery.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type DeregisterResponse struct {
}

func (m *DeregisterResponse) Reset()                    { *m = DeregisterResponse{} }
func (m *DeregisterResponse) String() string            { return proto.CompactTextString(m) }
func (*DeregisterResponse) ProtoMessage()               {}
func (*DeregisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetServiceRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *GetServiceRequest) Reset()                    { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()               {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetServiceResponse struct {
	Services []*discovery.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *GetServiceResponse) Reset()                    { *m = GetServiceResponse{} }
func (m *GetServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServiceResponse) ProtoMessage()               {}
func (*GetServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetServiceResponse) GetServices() []*discovery.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type ListServicesRequest struct {
}

func (m *ListServicesRequest) Reset()                    { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()               {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListServicesResponse struct {
	Services []*discovery.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ListServicesResponse) Reset()                    { *m = ListServicesResponse{} }
func (m *ListServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServicesResponse) ProtoMessage()               {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListServicesResponse) GetServices() []*discovery.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type WatchRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type WatchResponse struct {
	Result *discovery.Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *WatchResponse) Reset()                    { *m = WatchResponse{} }
func (m *WatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()               {}
func (*WatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WatchResponse) GetResult() *discovery.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "go.micro.srv.discovery.registry.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "go.micro.srv.discovery.registry.RegisterResponse")
	proto.RegisterType((*DeregisterRequest)(nil), "go.micro.srv.discovery.registry.DeregisterRequest")
	proto.RegisterType((*DeregisterResponse)(nil), "go.micro.srv.discovery.registry.DeregisterResponse")
	proto.RegisterType((*GetServiceRequest)(nil), "go.micro.srv.discovery.registry.GetServiceRequest")
	proto.RegisterType((*GetServiceResponse)(nil), "go.micro.srv.discovery.registry.GetServiceResponse")
	proto.RegisterType((*ListServicesRequest)(nil), "go.micro.srv.discovery.registry.ListServicesRequest")
	proto.RegisterType((*ListServicesResponse)(nil), "go.micro.srv.discovery.registry.ListServicesResponse")
	proto.RegisterType((*WatchRequest)(nil), "go.micro.srv.discovery.registry.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "go.micro.srv.discovery.registry.WatchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Registry service

type RegistryClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...client.CallOption) (*DeregisterResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...client.CallOption) (*GetServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...client.CallOption) (Registry_WatchClient, error)
}

type registryClient struct {
	c           client.Client
	serviceName string
}

func NewRegistryClient(serviceName string, c client.Client) RegistryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.discovery.registry"
	}
	return &registryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *registryClient) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Registry.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Deregister(ctx context.Context, in *DeregisterRequest, opts ...client.CallOption) (*DeregisterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Registry.Deregister", in)
	out := new(DeregisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...client.CallOption) (*GetServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Registry.GetService", in)
	out := new(GetServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Registry.ListServices", in)
	out := new(ListServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Watch(ctx context.Context, in *WatchRequest, opts ...client.CallOption) (Registry_WatchClient, error) {
	req := c.c.NewRequest(c.serviceName, "Registry.Watch", &WatchRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &registryWatchClient{stream}, nil
}

type Registry_WatchClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WatchResponse, error)
}

type registryWatchClient struct {
	stream client.Streamer
}

func (x *registryWatchClient) Close() error {
	return x.stream.Close()
}

func (x *registryWatchClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registryWatchClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *registryWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Registry service

type RegistryHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Deregister(context.Context, *DeregisterRequest, *DeregisterResponse) error
	GetService(context.Context, *GetServiceRequest, *GetServiceResponse) error
	ListServices(context.Context, *ListServicesRequest, *ListServicesResponse) error
	Watch(context.Context, *WatchRequest, Registry_WatchStream) error
}

func RegisterRegistryHandler(s server.Server, hdlr RegistryHandler) {
	s.Handle(s.NewHandler(&Registry{hdlr}))
}

type Registry struct {
	RegistryHandler
}

func (h *Registry) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.RegistryHandler.Register(ctx, in, out)
}

func (h *Registry) Deregister(ctx context.Context, in *DeregisterRequest, out *DeregisterResponse) error {
	return h.RegistryHandler.Deregister(ctx, in, out)
}

func (h *Registry) GetService(ctx context.Context, in *GetServiceRequest, out *GetServiceResponse) error {
	return h.RegistryHandler.GetService(ctx, in, out)
}

func (h *Registry) ListServices(ctx context.Context, in *ListServicesRequest, out *ListServicesResponse) error {
	return h.RegistryHandler.ListServices(ctx, in, out)
}

func (h *Registry) Watch(ctx context.Context, stream server.Streamer) error {
	m := new(WatchRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RegistryHandler.Watch(ctx, m, &registryWatchStream{stream})
}

type Registry_WatchStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchResponse) error
}

type registryWatchStream struct {
	stream server.Streamer
}

func (x *registryWatchStream) Close() error {
	return x.stream.Close()
}

func (x *registryWatchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registryWatchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *registryWatchStream) Send(m *WatchResponse) error {
	return x.stream.Send(m)
}

var fileDescriptor0 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x93, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0x25, 0x2a, 0xe0, 0x88, 0x41, 0x56, 0x8c, 0xda, 0x0b, 0xa6, 0xf1, 0xc0, 0x41, 0xb6,
	0x58, 0xf4, 0xe6, 0xd1, 0xc4, 0x8b, 0xa7, 0x7a, 0xf0, 0x0c, 0x75, 0x2c, 0x35, 0xe0, 0xc2, 0xec,
	0x82, 0xe1, 0xe0, 0x1f, 0xf5, 0xd7, 0xd8, 0x2c, 0x5b, 0x5a, 0xac, 0xa6, 0xed, 0x6d, 0x67, 0xf3,
	0xde, 0xf7, 0x9a, 0x7d, 0x53, 0xb8, 0x0f, 0x42, 0x35, 0x5e, 0x8c, 0xb8, 0x2f, 0xa6, 0xce, 0x34,
	0xf4, 0x49, 0x38, 0xaf, 0xa1, 0xf4, 0xc5, 0x12, 0x69, 0xd5, 0x93, 0xb4, 0x74, 0x66, 0x24, 0x94,
	0x70, 0x08, 0x83, 0x50, 0x2a, 0x5a, 0x6d, 0x0e, 0x5c, 0xdf, 0xb3, 0x4e, 0x20, 0xb8, 0x76, 0xf1,
	0x48, 0xcb, 0x37, 0x4e, 0x1e, 0xcb, 0xac, 0x2c, 0x3e, 0x10, 0xbd, 0xd9, 0x64, 0xa8, 0xde, 0x04,
	0x4d, 0x93, 0x28, 0x13, 0x93, 0x00, 0xf4, 0x6c, 0x5f, 0x43, 0xd3, 0xd3, 0x24, 0x24, 0x0f, 0xe7,
	0x0b, 0x94, 0x8a, 0x5d, 0x40, 0x4d, 0x22, 0x2d, 0x43, 0x1f, 0xcf, 0x2b, 0x97, 0x95, 0xee, 0xa1,
	0x5b, 0xe7, 0xcf, 0xeb, 0xd9, 0x66, 0x70, 0x9c, 0xa8, 0xe5, 0x4c, 0x7c, 0x48, 0xb4, 0x39, 0xb4,
	0x1e, 0x90, 0x8a, 0x33, 0xda, 0xc0, 0xd2, 0x7a, 0x43, 0xb9, 0x82, 0xd6, 0x23, 0x2a, 0xa3, 0x89,
	0x29, 0xcd, 0x6d, 0xca, 0x81, 0xdd, 0x07, 0x96, 0x56, 0xad, 0xbd, 0xcc, 0x82, 0xba, 0x91, 0xc9,
	0x48, 0xb7, 0xbb, 0x95, 0x76, 0x0a, 0x27, 0x4f, 0x51, 0x92, 0x19, 0xa5, 0x21, 0xdb, 0x2e, 0xb4,
	0xb7, 0xaf, 0x0b, 0xa0, 0x3a, 0xd0, 0x78, 0x19, 0x2a, 0x7f, 0xfc, 0xef, 0xd7, 0x75, 0xe1, 0xc8,
	0x08, 0x0c, 0xed, 0x0c, 0xaa, 0x84, 0x72, 0x31, 0x51, 0xe6, 0x11, 0x6a, 0xdc, 0xd3, 0xa3, 0xfb,
	0xbd, 0x07, 0x75, 0xcf, 0x14, 0xc8, 0xe6, 0xf1, 0x19, 0x89, 0xf5, 0x79, 0x4e, 0xdd, 0xfc, 0x57,
	0x5b, 0xd6, 0x4d, 0x09, 0x87, 0x79, 0xeb, 0x1d, 0xf6, 0x09, 0x90, 0x74, 0xc0, 0xdc, 0x5c, 0x44,
	0xa6, 0x60, 0x6b, 0x50, 0xca, 0x93, 0x0e, 0x4e, 0x0a, 0x2c, 0x10, 0x9c, 0xd9, 0x89, 0x02, 0xc1,
	0xd9, 0x0d, 0x89, 0x82, 0xbf, 0xa0, 0x91, 0x2e, 0x9c, 0xdd, 0xe6, 0x62, 0xfe, 0x58, 0x1b, 0xeb,
	0xae, 0xa4, 0x6b, 0x13, 0xff, 0x0e, 0xfb, 0x7a, 0x35, 0x58, 0x2f, 0x97, 0x90, 0xde, 0x31, 0x8b,
	0x17, 0x95, 0xc7, 0x49, 0xfd, 0xca, 0xa8, 0xaa, 0xff, 0xec, 0xc1, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0xa4, 0x92, 0x9e, 0x78, 0x04, 0x00, 0x00,
}
